type <error descr="\"MyOutputType\" must define one or more fields">MyOutputType</error> {
    in: <error descr="The type 'MyInputType' is not an output type, but was used to declare the output type of a field">MyInputType</error>
    in1: <error descr="The type 'OneMoreInput' is not an output type, but was used to declare the output type of a field">OneMoreInput</error>
    in2: <error descr="The type 'OneMoreInput' is not an output type, but was used to declare the output type of a field">OneMoreInput</error>
}

type OneMoreOutput {
    id: ID
}

input <error descr="\"MyInputType\" must define one or more fields">MyInputType</error> {
    out: <error descr="The type 'MyOutputType' is not an input type, but was used as an input type">MyOutputType</error>
    out1: <error descr="The type 'OneMoreOutput' is not an input type, but was used as an input type">OneMoreOutput</error>
    out2: <error descr="The type 'OneMoreOutput' is not an input type, but was used as an input type">OneMoreOutput</error>
}

input OneMoreInput {
    id: ID
}

type Query {
    field(arg: <error descr="The type 'MyOutputType' is not an input type, but was used as an input type">MyOutputType</error>, arg1: <error descr="The type 'OneMoreOutput' is not an input type, but was used as an input type">OneMoreOutput</error>): <error descr="The type 'MyInputType' is not an output type, but was used to declare the output type of a field">MyInputType</error>
    field1(arg: <error descr="The type 'OneMoreOutput' is not an input type, but was used as an input type">OneMoreOutput</error>): <error descr="The type 'OneMoreInput' is not an output type, but was used to declare the output type of a field">OneMoreInput</error>
    field2: OneMoreOutput
}

directive @Invalid(arg: <error descr="The type 'MyOutputType' is not an input type, but was used as an input type">MyOutputType</error>, arg2: <error descr="The type 'OneMoreOutput' is not an input type, but was used as an input type">OneMoreOutput</error>) on ENUM
