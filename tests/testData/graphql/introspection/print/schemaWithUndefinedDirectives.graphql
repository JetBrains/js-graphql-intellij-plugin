schema {
    query: Query
}

"An object with an ID"
interface Node {
    "The ID of the object."
    id: ID!
}

type CategoryNode implements Node {
    "The ID of the object."
    id: ID!
    ingredients(after: String, before: String, category: ID, category_Name: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, notes: String, notes_Icontains: String, offset: Int): IngredientNodeConnection!
    name: String!
}

type CategoryNodeConnection {
    "Contains the nodes in this connection."
    edges: [CategoryNodeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `CategoryNode` and its cursor."
type CategoryNodeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CategoryNode
}

"Debugging information for the current query."
type DjangoDebug {
    "Executed SQL queries for this API query."
    sql: [DjangoDebugSQL]
}

"Represents a single database query made to a Django managed DB."
type DjangoDebugSQL {
    "The Django database alias (e.g. 'default')."
    alias: String!
    "Duration of this database query in seconds."
    duration: Float!
    "Postgres connection encoding if available."
    encoding: String
    "Whether this database query was a SELECT."
    isSelect: Boolean!
    "Whether this database query took more than 10 seconds."
    isSlow: Boolean!
    "Postgres isolation level if available."
    isoLevel: String
    "JSON encoded database query parameters."
    params: String!
    "The raw SQL of this query, without params."
    rawSql: String!
    "The actual SQL sent to this database."
    sql: String
    "Start time of this database query."
    startTime: Float!
    "Stop time of this database query."
    stopTime: Float!
    "Postgres transaction ID if available."
    transId: String
    "Postgres transaction status if available."
    transStatus: String
    "The type of database being used (e.g. postrgesql, mysql, sqlite)."
    vendor: String!
}

type IngredientNode implements Node {
    category: CategoryNode!
    "The ID of the object."
    id: ID!
    name: String!
    notes: String
    usedBy(after: String, before: String, first: Int, ingredient_Name: String, ingredient_Name_Icontains: String, ingredient_Name_Istartswith: String, last: Int, offset: Int, recipe: ID, recipe_Title_Icontains: String): RecipeIngredientNodeConnection!
}

type IngredientNodeConnection {
    "Contains the nodes in this connection."
    edges: [IngredientNodeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `IngredientNode` and its cursor."
type IngredientNodeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: IngredientNode
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Query {
    _debug: DjangoDebug
    allCategories(after: String, before: String, first: Int, ingredients: [ID], last: Int, name: String, offset: Int): CategoryNodeConnection
    allIngredients(after: String, before: String, category: ID, category_Name: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, notes: String, notes_Icontains: String, offset: Int): IngredientNodeConnection
    allRecipeingredients(after: String, before: String, first: Int, ingredient_Name: String, ingredient_Name_Icontains: String, ingredient_Name_Istartswith: String, last: Int, offset: Int, recipe: ID, recipe_Title_Icontains: String): RecipeIngredientNodeConnection
    allRecipes(after: String, amounts: [ID], before: String, first: Int, last: Int, offset: Int, title: String): RecipeNodeConnection
    category(
        "The ID of the object"
        id: ID!
    ): CategoryNode
    ingredient(
        "The ID of the object"
        id: ID!
    ): IngredientNode
    recipe(
        "The ID of the object"
        id: ID!
    ): RecipeNode
    recipeingredient(
        "The ID of the object"
        id: ID!
    ): RecipeIngredientNode
}

type RecipeIngredientNode implements Node {
    amount: Float!
    "The ID of the object."
    id: ID!
    ingredient: IngredientNode!
    recipe: RecipeNode!
    unit: RecipeIngredientUnit!
}

type RecipeIngredientNodeConnection {
    "Contains the nodes in this connection."
    edges: [RecipeIngredientNodeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `RecipeIngredientNode` and its cursor."
type RecipeIngredientNodeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RecipeIngredientNode
}

type RecipeNode implements Node {
    amounts(after: String, before: String, first: Int, ingredient_Name: String, ingredient_Name_Icontains: String, ingredient_Name_Istartswith: String, last: Int, offset: Int, recipe: ID, recipe_Title_Icontains: String): RecipeIngredientNodeConnection!
    "The ID of the object."
    id: ID!
    instructions: String!
    title: String!
}

type RecipeNodeConnection {
    "Contains the nodes in this connection."
    edges: [RecipeNodeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `RecipeNode` and its cursor."
type RecipeNodeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: RecipeNode
}

"An enumeration."
enum RecipeIngredientUnit {
    "Kilograms"
    KG
    "Litres"
    L
    "Shots"
    ST
    "Units"
    UNIT
}
