# ------------------------------------------------------------------------------------------------------------------ ###
# Generated by JS GraphQL IntelliJ Plugin.                                                                           ###
# This file contains Relay Modern directives.                                                                        ###
# Based on https://facebook.github.io/relay/docs/en/graphql-in-relay.html                                            ###
# ------------------------------------------------------------------------------------------------------------------ ###


"""
@argumentDefinitions is a directive used to specify arguments taken by a fragment.
"""
directive @argumentDefinitions on FRAGMENT_DEFINITION

"""
@arguments is a directive used to pass arguments to a fragment that was defined using @argumentDefinitions.
"""
directive @arguments on FRAGMENT_SPREAD


"""
When using the Pagination Container, Relay expects connection fields to be annotated with a @connection directive.
"""
directive @connection(key: String!, filters: [String]) on FIELD

directive @relay(
    """
    When defining a fragment, you can use the @relay(plural: true) directive to indicate that the fragment is
    backed by a GraphQL list, meaning that it will inform Relay that this particular field is an array.
    """
    plural: Boolean

    """
    Relay by default will only expose the data for fields explicitly requested by a component's fragment,
    which is known as data masking. However, @relay(mask: false) can be used to prevent data masking; when including a
    fragment and annotating it with @relay(mask: false), its data will be available to the parent, recursively including
    the data from the fields of the referenced fragment.
    """
    mask: Boolean
) on FRAGMENT_DEFINITION | FRAGMENT_SPREAD

directive @inline on FRAGMENT_DEFINITION

directive @match on FIELD

directive @module(
    name: String!
) on FRAGMENT_SPREAD

directive @refetchable(
    queryName: String!
) on FRAGMENT_DEFINITION

directive @defer(
    label: String!
    if: Boolean = true
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @stream(
    label: String!
    initial_count: Int!
    if: Boolean = true
) on FIELD

directive @preloadable on QUERY

enum RequiredFieldAction {
    NONE
    LOG
    THROW
}

directive @required(
    action: RequiredFieldAction!
) on FIELD


"""
Works on GraphQL fields that return an ID or [ID]. Will delete the record with the given ID in the Relay Store.
"""
directive @deleteRecord on FIELD

"""
Works on GraphQL fields that return an ID or [ID]. Will delete the edge with nodes that matches the
id from each connection defined in the connections array.
"""
directive @deleteEdge(
    """
    An array of connection IDs. Connection IDs can be obtained either by using the __id field on connections
    or using the ConnectionHandler.getConnectionID API.
    """
    connections: [ID!]!
) on FIELD

"""
This directive works on edge fields.
@appendEdge will add the selected edge to the end of each connection in the connections array.
"""
directive @appendEdge(
    connections: [ID!]!
) on FIELD

"""
This directive works on edge fields.
@prependEdge will add the selected edge to the beginning of each defined in the connections array.
"""
directive @prependEdge(
    """
    An array of connection IDs. Connection IDs can be obtained either by using the __id field on connections
    or using the ConnectionHandler.getConnectionID API.
    """
    connections: [ID!]!
) on FIELD

"""
This directive works on node fields and will create edges with the specified edgeTypeName.
@appendNode will add the selected node to the end of each connection in the connections array.
"""
directive @appendNode(
    """
    An array of connection IDs. Connection IDs can be obtained either by using the __id field on connections
    or using the ConnectionHandler.getConnectionID API.
    """
    connections: [ID!]!

    """
    The typename of an edge, corresponding to the edge type argument in ConnectionHandler.createEdge.
    """
    edgeTypeName: String!
) on FIELD

"""
This directive works on node fields and will create edges with the specified edgeTypeName.
@prependNode will add the selected node to the beginning of each defined in the connections array.
"""
directive @prependNode(
    """
    An array of connection IDs. Connection IDs can be obtained either by using the __id field on connections
    or using the ConnectionHandler.getConnectionID API.
    """
    connections: [ID!]!

    """
    The typename of an edge, corresponding to the edge type argument in ConnectionHandler.createEdge.
    """
    edgeTypeName: String!
) on FIELD

"""
A directive added to queries which tells Relay to generate types that cover
the optimisticResponse parameter to commitMutation.
"""
directive @raw_response_type on QUERY | MUTATION | SUBSCRIPTION

